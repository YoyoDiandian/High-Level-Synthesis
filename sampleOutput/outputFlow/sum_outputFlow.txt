===== Function Basic Information =====
Function name: sum
Return type: int
Parameters: {('b', 'array'), ('a', 'array'), ('n', 'non-array')}
========================

===== Basic Block Information =====
Basic block 0:
	Next basic block: start
	Operation list:
		[0] ['c', 0, '0']
Basic block start:
	Next basic block: calc
	Operation list:
		[0] ['i', 13, '0', '0', 'i_inc', 'calc']
		[1] ['sum', 13, 'c', '0', 'temp', 'calc']
		[2] ['cond', 11, 'i', 'n']
		[3] ['', 7, 'cond', 'ret', 'calc']
Basic block calc:
	Next basic block: ret
	Operation list:
		[0] ['ai', 5, 'a', 'i']
		[1] ['temp', 1, 'sum', 'ai']
		[2] ['', 6, 'b', 'i', 'temp']
		[3] ['i_inc', 1, 'i', '1']
		[4] ['', 7, 'start']
Basic block ret:
	Next basic block: None
	Operation list:
		[0] ['num', 2, 'n', '1']
		[1] ['res', 5, 'b', 'num']
		[2] ['', 14, 'res']
===================

===== Control Flow Graph (CFG) =====
	0 -> start [Condition: true]
	start -> ret [Condition: cond]
	start -> calc [Condition: not cond]
	calc -> start [Condition: true]
=======================

===== Data Flow Graph (DFG) =====
	DFG of basic block start:
		Operation 0 -> 2 [Value: i]
		Operation 2 -> 3 [Value: cond]
	DFG of basic block calc:
		Operation 0 -> 1 [Value: ai]
		Operation 1 -> 2 [Value: temp]
	DFG of basic block ret:
		Operation 0 -> 1 [Value: num]
		Operation 1 -> 2 [Value: res]
=======================

===== Schedule Results =====
Basic block 0's schedule results:
  cycle 0: (operation 0, resource 0) 
Basic block start's schedule results:
  cycle 0: (operation 0, resource 0) 
  cycle 1: (operation 1, resource 0) (operation 2, resource 0) 
  cycle 2: (operation 3, resource 0) 
Basic block calc's schedule results:
  cycle 0: (operation 0, resource 0) (operation 3, resource 0) (operation 4, resource 0) 
  cycle 1: 
  cycle 2: (operation 1, resource 0) 
  cycle 3: (operation 2, resource 0) 
  cycle 4: 
Basic block ret's schedule results:
  cycle 0: (operation 0, resource 0) 
  cycle 1: (operation 1, resource 0) 
  cycle 2: 
  cycle 3: (operation 2, resource 0) 
===================================

===== Initial Register Allocation =====
Input variables:
Basic block 0:
No input variables in this block.  
Basic block start:
c  i_inc  
Basic block calc:
sum  
Basic block ret:
sum  
-----------------------------------
Output variables:
Basic block 0:
c  
Basic block start:
sum  
Basic block ret:
sum  
Basic block calc:
i_inc  
-----------------------------------
Global Variables:
temp  i
-----------------------------------
Getting Local Variable Liveness:
Basic block 0: 
  cycle 0, there's no variable living in this cycle.
  cycle 1, variable	c	is living.
Basic block start: 
  cycle 0, variable	c, i_inc	is living.
  cycle 1, variable	c	is living.
  cycle 2, variable	cond, sum	is living.
  cycle 3, variable	sum	is living.
Basic block calc: 
  cycle 0, variable	sum	is living.
  cycle 1, variable	ai, sum, i_inc	is living.
  cycle 2, variable	ai, sum, i_inc	is living.
  cycle 3, variable	i_inc	is living.
  cycle 4, variable	i_inc	is living.
  cycle 5, variable	i_inc	is living.
Basic block ret: 
  cycle 0, variable	sum	is living.
  cycle 1, variable	sum, num	is living.
  cycle 2, variable	res, sum	is living.
  cycle 3, variable	res, sum	is living.
  cycle 4, variable	sum	is living.
-----------------------------------
Getting Living Period for every local variable:
Basic block 0: 
  Variable	c	lives from cycle 1 to cycle 1
Basic block start: 
  Variable	c	lives from cycle 0 to cycle 1
  Variable	i_inc	lives from cycle 0 to cycle 0
  Variable	cond	lives from cycle 2 to cycle 2
  Variable	sum	lives from cycle 2 to cycle 3
Basic block calc: 
  Variable	sum	lives from cycle 0 to cycle 2
  Variable	ai	lives from cycle 1 to cycle 2
  Variable	i_inc	lives from cycle 1 to cycle 5
Basic block ret: 
  Variable	sum	lives from cycle 0 to cycle 4
  Variable	num	lives from cycle 1 to cycle 1
  Variable	res	lives from cycle 2 to cycle 3
-----------------------------------
Register Allocation:
Basic block 0: 
  Register 0:
    stores variable	c	from cycle 1 to cycle 1
  Register 1:
  Register 2:
Basic block start: 
  Register 0:
    stores variable	sum	from cycle 2 to cycle 3
    stores variable	c	from cycle 0 to cycle 1
  Register 1:
    stores variable	cond	from cycle 2 to cycle 2
  Register 2:
    stores variable	i_inc	from cycle 0 to cycle 0
Basic block calc: 
  Register 0:
    stores variable	sum	from cycle 0 to cycle 2
  Register 1:
    stores variable	ai	from cycle 1 to cycle 2
  Register 2:
    stores variable	i_inc	from cycle 1 to cycle 5
Basic block ret: 
  Register 0:
    stores variable	sum	from cycle 0 to cycle 4
  Register 1:
    stores variable	num	from cycle 1 to cycle 1
    stores variable	res	from cycle 2 to cycle 3
  Register 2:
-----------------------------------
Register Allocation After Merging:
Basic block 0: 
  Register 0:
    stores variable	c	from cycle 1 to cycle 1
  Register 1:
  Register 2:
Basic block start: 
  Register 0:
    stores variable	sum	from cycle 2 to cycle 3
    stores variable	c	from cycle 0 to cycle 1
  Register 1:
    stores variable	cond	from cycle 2 to cycle 2
  Register 2:
    stores variable	i_inc	from cycle 0 to cycle 0
Basic block calc: 
  Register 0:
    stores variable	sum	from cycle 0 to cycle 2
  Register 1:
    stores variable	ai	from cycle 1 to cycle 2
  Register 2:
    stores variable	i_inc	from cycle 1 to cycle 5
Basic block ret: 
  Register 0:
    stores variable	sum	from cycle 0 to cycle 4
  Register 1:
    stores variable	num	from cycle 1 to cycle 1
    stores variable	res	from cycle 2 to cycle 3
  Register 2:
-----------------------------------

Register Usage Statistics:
Total registers needed: 5
Global registers needed: 2
Local registers needed: 3
=====================================

